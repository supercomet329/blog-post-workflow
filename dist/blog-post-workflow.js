parcelRequire=function(e,r,t,n){var i,o="function"==typeof parcelRequire&&parcelRequire,u="function"==typeof require&&require;function f(t,n){if(!r[t]){if(!e[t]){var i="function"==typeof parcelRequire&&parcelRequire;if(!n&&i)return i(t,!0);if(o)return o(t,!0);if(u&&"string"==typeof t)return u(t);var c=new Error("Cannot find module '"+t+"'");throw c.code="MODULE_NOT_FOUND",c}p.resolve=function(r){return e[t][1][r]||r},p.cache={};var l=r[t]=new f.Module(t);e[t][0].call(l.exports,p,l,l.exports,this)}return r[t].exports;function p(e){return f(p.resolve(e))}}f.isParcelRequire=!0,f.Module=function(e){this.id=e,this.bundle=f,this.exports={}},f.modules=e,f.cache=r,f.parent=o,f.register=function(r,t){e[r]=[function(e,r){r.exports=t},{}]};for(var c=0;c<t.length;c++)try{f(t[c])}catch(e){i||(i=e)}if(t.length){var l=f(t[t.length-1]);"object"==typeof exports&&"undefined"!=typeof module?module.exports=l:"function"==typeof define&&define.amd?define(function(){return l}):n&&(this[n]=l)}if(parcelRequire=f,i)throw i;return f}({"MHPq":[function(require,module,exports) {
const e=require("process");let t=require("rss-parser");const r=require("@actions/core"),n=require("lodash"),i=require("fs"),{spawn:o}=require("child_process"),s=(e,t)=>{const r=e.indexOf("\x3c!-- BLOG-POST-LIST:START"),n=e.indexOf("--\x3e",r),i=e.indexOf("\x3c!-- BLOG-POST-LIST:END",n);return-1===r||-1===n||-1===i?e:[e.slice(0,n+"--\x3e".length),"\n",t,"\n",e.slice(i)].join("")},a=async()=>{const e=(e,t=[])=>new Promise((r,n)=>{console.log(`Started: ${e} ${t.join(" ")}`);const i=o(e,t,{stdio:"inherit"});i.on("close",e=>0!==e?(err=new Error(`Invalid status code: ${e}`),err.code=e,n(err)):r(e)),i.on("error",n)});await e("git",["config","--global","user.email","blog-post-bot@example.com"]),await e("git",["config","--global","user.name","blog-post-bot"]),await e("git",["add",u]),await e("git",["commit","-m","Updated with latest blog posts"]),await e("git",["push"])};let l=new t;const c=Number.parseInt(r.getInput("max_post_count")),u=r.getInput("readme_path"),d=r.getInput("gh_token");r.setSecret(d);const p=[],g=[];let f=[],h=!1;const m=r.getInput("feed_list").trim();let x=m.split(",");0===x.length&&(r.error("Please double check the value of feed_list"),e.exit(1)),x.forEach(e=>{g.push(e),p.push(new Promise((t,r)=>{l.parseURL(e).then(e=>{const i=n.get(e,"items");if(void 0===i)r("Cannot read response->item");else{const e=i.map(e=>(void 0===e.pubDate&&r("Cannot read response->item->pubDate"),void 0===e.title&&r("Cannot read response->item->title"),void 0===e.link&&r("Cannot read response->item->link"),{title:e.title,url:e.link,date:new Date(e.pubDate)}));t(e)}}).catch(r)}))}),Promise.allSettled(p).then(e=>{e.forEach((e,t)=>{"fulfilled"===e.status?(r.info(g[t]+" runner succeeded. Post count: "+e.value.length),f=[...f,...e.value]):(h=!0,r.error(g[t]+" runner failed, please verify the configuration. Error:"),r.error(e.reason))})}).finally(()=>{if(f.sort(function(e,t){return t.date-e.date}),(f=f.slice(0,c)).length>0)try{const n=i.readFileSync(u,"utf8"),o=f.reduce((e,t,r)=>e+`- [${t.title}](${t.url})`+(r===f.length-1?"":"\n"),""),l=s(n,o);l!==n?(r.info("Writing to "+u),i.writeFileSync(u,l),e.env.TEST_MODE||a.then(()=>{r.info("Readme updated successfully in the upstream repository"),h?e.exit(1):e.exit(0)})):(r.info("No change detected, skipping"),e.exit(0))}catch(t){r.error(t),e.exit(1)}});
},{}]},{},["MHPq"], null)